/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LostItem as PrismaLostItem,
  User as PrismaUser,
} from "@prisma/client";
import { LostItemCreateInputDto } from "../LostItemCreateInputDto";

export class LostItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LostItemCountArgs, "select">): Promise<number> {
    return this.prisma.lostItem.count(args);
  }

  async lostItems(
    args: Prisma.LostItemFindManyArgs
  ): Promise<PrismaLostItem[]> {
    return this.prisma.lostItem.findMany(args);
  }
  async lostItem(
    args: Prisma.LostItemFindUniqueArgs
  ): Promise<PrismaLostItem | null> {
    return this.prisma.lostItem.findUnique(args);
  }
  async createLostItem(
    args: Prisma.LostItemCreateArgs
  ): Promise<PrismaLostItem> {
    return this.prisma.lostItem.create(args);
  }
  async updateLostItem(
    args: Prisma.LostItemUpdateArgs
  ): Promise<PrismaLostItem> {
    return this.prisma.lostItem.update(args);
  }
  async deleteLostItem(
    args: Prisma.LostItemDeleteArgs
  ): Promise<PrismaLostItem> {
    return this.prisma.lostItem.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.lostItem
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async ReportLostItem(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ReportLostItemAction(
    args: LostItemCreateInputDto
  ): Promise<LostItemCreateInputDto> {
    throw new Error("Not implemented");
  }
  async SearchLostItems(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async SearchLostItemsAction(args: string): Promise<LostItemCreateInputDto[]> {
    throw new Error("Not implemented");
  }
}
