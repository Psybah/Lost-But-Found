/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LostItem } from "./LostItem";
import { LostItemCountArgs } from "./LostItemCountArgs";
import { LostItemFindManyArgs } from "./LostItemFindManyArgs";
import { LostItemFindUniqueArgs } from "./LostItemFindUniqueArgs";
import { CreateLostItemArgs } from "./CreateLostItemArgs";
import { UpdateLostItemArgs } from "./UpdateLostItemArgs";
import { DeleteLostItemArgs } from "./DeleteLostItemArgs";
import { User } from "../../user/base/User";
import { LostItemCreateInputDto } from "../LostItemCreateInputDto";
import { LostItemWithValidationDto } from "../LostItemWithValidationDto";
import { LostItemService } from "../lostItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LostItem)
export class LostItemResolverBase {
  constructor(
    protected readonly service: LostItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "read",
    possession: "any",
  })
  async _lostItemsMeta(
    @graphql.Args() args: LostItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LostItem])
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "read",
    possession: "any",
  })
  async lostItems(
    @graphql.Args() args: LostItemFindManyArgs
  ): Promise<LostItem[]> {
    return this.service.lostItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LostItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "read",
    possession: "own",
  })
  async lostItem(
    @graphql.Args() args: LostItemFindUniqueArgs
  ): Promise<LostItem | null> {
    const result = await this.service.lostItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LostItem)
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "create",
    possession: "any",
  })
  async createLostItem(
    @graphql.Args() args: CreateLostItemArgs
  ): Promise<LostItem> {
    return await this.service.createLostItem({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LostItem)
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "update",
    possession: "any",
  })
  async updateLostItem(
    @graphql.Args() args: UpdateLostItemArgs
  ): Promise<LostItem | null> {
    try {
      return await this.service.updateLostItem({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LostItem)
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "delete",
    possession: "any",
  })
  async deleteLostItem(
    @graphql.Args() args: DeleteLostItemArgs
  ): Promise<LostItem | null> {
    try {
      return await this.service.deleteLostItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: LostItem): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async ReportLostItem(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.ReportLostItem(args);
  }

  @graphql.Mutation(() => LostItemCreateInputDto)
  async ReportLostItemAction(
    @graphql.Args()
    args: LostItemCreateInputDto
  ): Promise<LostItemCreateInputDto> {
    return this.service.ReportLostItemAction(args);
  }

  @graphql.Mutation(() => LostItemWithValidationDto)
  async ReportLostItemWithValidation(
    @graphql.Args()
    args: LostItemWithValidationDto
  ): Promise<LostItemWithValidationDto> {
    return this.service.ReportLostItemWithValidation(args);
  }

  @graphql.Query(() => String)
  async SearchLostItems(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.SearchLostItems(args);
  }

  @graphql.Query(() => [LostItemCreateInputDto])
  async SearchLostItemsAction(
    @graphql.Args()
    args: string
  ): Promise<LostItemCreateInputDto[]> {
    return this.service.SearchLostItemsAction(args);
  }

  @graphql.Query(() => [LostItemWithValidationDto])
  async SearchLostItemsWithValidation(
    @graphql.Args()
    args: string
  ): Promise<LostItemWithValidationDto[]> {
    return this.service.SearchLostItemsWithValidation(args);
  }
}
