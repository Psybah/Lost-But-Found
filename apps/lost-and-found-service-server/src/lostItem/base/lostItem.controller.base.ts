/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { LostItemService } from "../lostItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LostItemCreateInput } from "./LostItemCreateInput";
import { LostItem } from "./LostItem";
import { LostItemFindManyArgs } from "./LostItemFindManyArgs";
import { LostItemWhereUniqueInput } from "./LostItemWhereUniqueInput";
import { LostItemUpdateInput } from "./LostItemUpdateInput";
import { LostItemCreateInputDto } from "../LostItemCreateInputDto";
import { LostItemWithValidationDto } from "../LostItemWithValidationDto";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class LostItemControllerBase {
  constructor(
    protected readonly service: LostItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LostItem })
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createLostItem(
    @common.Body() data: LostItemCreateInput
  ): Promise<LostItem> {
    return await this.service.createLostItem({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        category: true,
        createdAt: true,
        dateLost: true,
        description: true,
        id: true,
        locationLost: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [LostItem] })
  @ApiNestedQuery(LostItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async lostItems(@common.Req() request: Request): Promise<LostItem[]> {
    const args = plainToClass(LostItemFindManyArgs, request.query);
    return this.service.lostItems({
      ...args,
      select: {
        category: true,
        createdAt: true,
        dateLost: true,
        description: true,
        id: true,
        locationLost: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LostItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async lostItem(
    @common.Param() params: LostItemWhereUniqueInput
  ): Promise<LostItem | null> {
    const result = await this.service.lostItem({
      where: params,
      select: {
        category: true,
        createdAt: true,
        dateLost: true,
        description: true,
        id: true,
        locationLost: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LostItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateLostItem(
    @common.Param() params: LostItemWhereUniqueInput,
    @common.Body() data: LostItemUpdateInput
  ): Promise<LostItem | null> {
    try {
      return await this.service.updateLostItem({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          category: true,
          createdAt: true,
          dateLost: true,
          description: true,
          id: true,
          locationLost: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LostItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LostItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteLostItem(
    @common.Param() params: LostItemWhereUniqueInput
  ): Promise<LostItem | null> {
    try {
      return await this.service.deleteLostItem({
        where: params,
        select: {
          category: true,
          createdAt: true,
          dateLost: true,
          description: true,
          id: true,
          locationLost: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/report-lost-item")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportLostItem(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.ReportLostItem(body);
  }

  @common.Post("/lost-items")
  @swagger.ApiOkResponse({
    type: LostItemCreateInputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportLostItemAction(
    @common.Body()
    body: string
  ): Promise<LostItemCreateInputDto> {
    return this.service.ReportLostItemAction(body);
  }

  @common.Post("/lost-items-v2")
  @swagger.ApiOkResponse({
    type: LostItemWithValidationDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportLostItemWithValidation(
    @common.Body()
    body: string
  ): Promise<LostItemWithValidationDto> {
    return this.service.ReportLostItemWithValidation(body);
  }

  @common.Get("/:id/search-lost-items")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SearchLostItems(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SearchLostItems(body);
  }

  @common.Get("/lost-items/search")
  @swagger.ApiOkResponse({
    type: LostItemCreateInputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SearchLostItemsAction(
    @common.Body()
    body: string
  ): Promise<LostItemCreateInputDto[]> {
    return this.service.SearchLostItemsAction(body);
  }

  @common.Get("/lost-items/search-v2")
  @swagger.ApiOkResponse({
    type: LostItemWithValidationDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SearchLostItemsWithValidation(
    @common.Body()
    body: string
  ): Promise<LostItemWithValidationDto[]> {
    return this.service.SearchLostItemsWithValidation(body);
  }
}
