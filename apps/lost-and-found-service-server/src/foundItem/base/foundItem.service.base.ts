/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FoundItem as PrismaFoundItem,
  User as PrismaUser,
} from "@prisma/client";
import { FoundItemCreateInputDto } from "../FoundItemCreateInputDto";

export class FoundItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FoundItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.foundItem.count(args);
  }

  async foundItems(
    args: Prisma.FoundItemFindManyArgs
  ): Promise<PrismaFoundItem[]> {
    return this.prisma.foundItem.findMany(args);
  }
  async foundItem(
    args: Prisma.FoundItemFindUniqueArgs
  ): Promise<PrismaFoundItem | null> {
    return this.prisma.foundItem.findUnique(args);
  }
  async createFoundItem(
    args: Prisma.FoundItemCreateArgs
  ): Promise<PrismaFoundItem> {
    return this.prisma.foundItem.create(args);
  }
  async updateFoundItem(
    args: Prisma.FoundItemUpdateArgs
  ): Promise<PrismaFoundItem> {
    return this.prisma.foundItem.update(args);
  }
  async deleteFoundItem(
    args: Prisma.FoundItemDeleteArgs
  ): Promise<PrismaFoundItem> {
    return this.prisma.foundItem.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.foundItem
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async ReportFoundItem(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ReportFoundItemAction(
    args: FoundItemCreateInputDto
  ): Promise<FoundItemCreateInputDto> {
    throw new Error("Not implemented");
  }
}
