/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FoundItem as PrismaFoundItem,
  User as PrismaUser,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";
import { FoundItemCreateInputDto } from "../FoundItemCreateInputDto";
import { FoundItemWithValidationDto } from "../FoundItemWithValidationDto";

export class FoundItemServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.FoundItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.foundItem.count(args);
  }

  async foundItems(
    args: Prisma.FoundItemFindManyArgs
  ): Promise<PrismaFoundItem[]> {
    return this.prisma.foundItem.findMany(args);
  }
  async foundItem(
    args: Prisma.FoundItemFindUniqueArgs
  ): Promise<PrismaFoundItem | null> {
    return this.prisma.foundItem.findUnique(args);
  }
  async createFoundItem(
    args: Prisma.FoundItemCreateArgs
  ): Promise<PrismaFoundItem> {
    return this.prisma.foundItem.create(args);
  }
  async updateFoundItem(
    args: Prisma.FoundItemUpdateArgs
  ): Promise<PrismaFoundItem> {
    return this.prisma.foundItem.update(args);
  }
  async deleteFoundItem(
    args: Prisma.FoundItemDeleteArgs
  ): Promise<PrismaFoundItem> {
    return this.prisma.foundItem.delete(args);
  }

  async uploadImage<T extends Prisma.FoundItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoundItemFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaFoundItem> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.foundItem.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.FoundItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoundItemFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.foundItem.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.FoundItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoundItemFindUniqueArgs>
  ): Promise<PrismaFoundItem> {
    const { image } = await this.prisma.foundItem.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.foundItem.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.foundItem
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async ReportFoundItem(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ReportFoundItemAction(
    args: FoundItemCreateInputDto
  ): Promise<FoundItemCreateInputDto> {
    throw new Error("Not implemented");
  }
  async ReportFoundItemWithValidation(
    args: FoundItemWithValidationDto
  ): Promise<FoundItemWithValidationDto> {
    throw new Error("Not implemented");
  }
}
