/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { FoundItemService } from "../foundItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FoundItemCreateInput } from "./FoundItemCreateInput";
import { FoundItem } from "./FoundItem";
import { FoundItemFindManyArgs } from "./FoundItemFindManyArgs";
import { FoundItemWhereUniqueInput } from "./FoundItemWhereUniqueInput";
import { FoundItemUpdateInput } from "./FoundItemUpdateInput";
import { FoundItemWithValidationDto } from "../FoundItemWithValidationDto";
import { FoundItemCreateInputDto } from "../FoundItemCreateInputDto";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FoundItemControllerBase {
  constructor(
    protected readonly service: FoundItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FoundItem })
  @nestAccessControl.UseRoles({
    resource: "FoundItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFoundItem(
    @common.Body() data: FoundItemCreateInput
  ): Promise<FoundItem> {
    return await this.service.createFoundItem({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        category: true,
        createdAt: true,
        dateFound: true,
        description: true,
        id: true,
        image: true,
        locationFound: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FoundItem] })
  @ApiNestedQuery(FoundItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FoundItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async foundItems(@common.Req() request: Request): Promise<FoundItem[]> {
    const args = plainToClass(FoundItemFindManyArgs, request.query);
    return this.service.foundItems({
      ...args,
      select: {
        category: true,
        createdAt: true,
        dateFound: true,
        description: true,
        id: true,
        image: true,
        locationFound: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FoundItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FoundItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async foundItem(
    @common.Param() params: FoundItemWhereUniqueInput
  ): Promise<FoundItem | null> {
    const result = await this.service.foundItem({
      where: params,
      select: {
        category: true,
        createdAt: true,
        dateFound: true,
        description: true,
        id: true,
        image: true,
        locationFound: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FoundItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FoundItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFoundItem(
    @common.Param() params: FoundItemWhereUniqueInput,
    @common.Body() data: FoundItemUpdateInput
  ): Promise<FoundItem | null> {
    try {
      return await this.service.updateFoundItem({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          category: true,
          createdAt: true,
          dateFound: true,
          description: true,
          id: true,
          image: true,
          locationFound: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FoundItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FoundItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFoundItem(
    @common.Param() params: FoundItemWhereUniqueInput
  ): Promise<FoundItem | null> {
    try {
      return await this.service.deleteFoundItem({
        where: params,
        select: {
          category: true,
          createdAt: true,
          dateFound: true,
          description: true,
          id: true,
          image: true,
          locationFound: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/image")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: FoundItem,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadImage(
    @common.Param()
    params: FoundItemWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<FoundItem> {
    return this.service.uploadImage(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/image")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadImage(
    @common.Param()
    params: FoundItemWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadImage({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/image")
  @swagger.ApiOkResponse({
    type: FoundItem,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteImage(
    @common.Param()
    params: FoundItemWhereUniqueInput
  ): Promise<FoundItem> {
    return this.service.deleteImage({
      where: params,
    });
  }

  @common.Get("/:id/report-found-item")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportFoundItem(
    @common.Body()
    body: FoundItemWithValidationDto
  ): Promise<string> {
    return this.service.ReportFoundItem(body);
  }

  @common.Post("/found-items")
  @swagger.ApiOkResponse({
    type: FoundItemCreateInputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportFoundItemAction(
    @common.Body()
    body: FoundItemWithValidationDto
  ): Promise<FoundItemCreateInputDto> {
    return this.service.ReportFoundItemAction(body);
  }

  @common.Post("/found-items-v2")
  @swagger.ApiOkResponse({
    type: FoundItemWithValidationDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportFoundItemWithValidation(
    @common.Body()
    body: FoundItemWithValidationDto
  ): Promise<FoundItemWithValidationDto> {
    return this.service.ReportFoundItemWithValidation(body);
  }
}
