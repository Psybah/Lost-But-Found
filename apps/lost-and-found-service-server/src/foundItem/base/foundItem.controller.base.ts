/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FoundItemService } from "../foundItem.service";
import { FoundItemCreateInput } from "./FoundItemCreateInput";
import { FoundItem } from "./FoundItem";
import { FoundItemFindManyArgs } from "./FoundItemFindManyArgs";
import { FoundItemWhereUniqueInput } from "./FoundItemWhereUniqueInput";
import { FoundItemUpdateInput } from "./FoundItemUpdateInput";
import { FoundItemCreateInputDto } from "../FoundItemCreateInputDto";

export class FoundItemControllerBase {
  constructor(protected readonly service: FoundItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FoundItem })
  async createFoundItem(
    @common.Body() data: FoundItemCreateInput
  ): Promise<FoundItem> {
    return await this.service.createFoundItem({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        category: true,
        createdAt: true,
        dateFound: true,
        description: true,
        id: true,
        image: true,
        locationFound: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FoundItem] })
  @ApiNestedQuery(FoundItemFindManyArgs)
  async foundItems(@common.Req() request: Request): Promise<FoundItem[]> {
    const args = plainToClass(FoundItemFindManyArgs, request.query);
    return this.service.foundItems({
      ...args,
      select: {
        category: true,
        createdAt: true,
        dateFound: true,
        description: true,
        id: true,
        image: true,
        locationFound: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FoundItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async foundItem(
    @common.Param() params: FoundItemWhereUniqueInput
  ): Promise<FoundItem | null> {
    const result = await this.service.foundItem({
      where: params,
      select: {
        category: true,
        createdAt: true,
        dateFound: true,
        description: true,
        id: true,
        image: true,
        locationFound: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FoundItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFoundItem(
    @common.Param() params: FoundItemWhereUniqueInput,
    @common.Body() data: FoundItemUpdateInput
  ): Promise<FoundItem | null> {
    try {
      return await this.service.updateFoundItem({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          category: true,
          createdAt: true,
          dateFound: true,
          description: true,
          id: true,
          image: true,
          locationFound: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FoundItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFoundItem(
    @common.Param() params: FoundItemWhereUniqueInput
  ): Promise<FoundItem | null> {
    try {
      return await this.service.deleteFoundItem({
        where: params,
        select: {
          category: true,
          createdAt: true,
          dateFound: true,
          description: true,
          id: true,
          image: true,
          locationFound: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/report-found-item")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportFoundItem(
    @common.Body()
    body: FoundItemCreateInputDto
  ): Promise<string> {
    return this.service.ReportFoundItem(body);
  }

  @common.Post("/found-items")
  @swagger.ApiOkResponse({
    type: FoundItemCreateInputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ReportFoundItemAction(
    @common.Body()
    body: FoundItemCreateInputDto
  ): Promise<FoundItemCreateInputDto> {
    return this.service.ReportFoundItemAction(body);
  }
}
